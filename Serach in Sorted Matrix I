 public class Solution {
   public int[] search(int[][] matrix, int target) {
     int[] result = new int[] {-1,-1};
     if(matrix.length == 0 || matrix[0].length == 0) {
       return result;
     }
     int i = 0;
     int col = matrix[0].length;//4
     int row = matrix.length;//1
     int j = row * col - 1;//3
     while(i <= j){
       int mid = i + (j - i)/2;//1 2 3 
       int midRow = mid/col;//0 0 0 0
       int midCol = mid%col;//1 2 3 
       if(matrix[midRow][midCol] == target) {
         return new int[] {midRow,midCol};
       } else if (matrix[midRow][midCol] > target) {
         j = mid - 1;
       } else{
         i = mid + 1;
       }
     }
     return new int[] {-1,-1};
   }
 }
 

2. corner case:

int[] result = new int[] {-1,-1};
     if(matrix.length == 0 || matrix[0].length == 0) {
       return result;
     }

     
     
3. return 的其实是一个array，so 

return new int[] {midRow,midCol};


4.     int j = row * col - 1;//3
-1 是最精髓的，千万不能忘，不然就直接out of bound了
       
