public class Solution {
  public int search(Dictionary dictionary, int target) {
    if (dictionary == null) {
      return -1;
    }
    int left = 0;
    int right = 1;
    while (dictionary.get(right) != null && dictionary.get(right) < target) {
      left = right;
      right = 2*right;
    }
    while (left <= right) {
      int mid = left + (right - left)/2;
      if (dictionary.get(mid) == null || dictionary.get(mid) > target) {
        right = mid - 1;
      } else if (dictionary.get(mid) < target) {
        left = mid + 1;
      } else {
        return mid;
      }
    }
    return -1;
  }
}


05/27/2022 如下的方法是自己写出的，虽也可以用但确实不如上面的好。
public class Solution {
  public int search(Dictionary array, int target) {
    int right = findRight(array);
    int left = 0;
    while (left <= right) {
      int mid = left + (right - left)/2;
      if (array.get(mid) == target) {
        return mid;
      } else if(array.get(mid) > target) {
        right = mid - 1;
      } else {
        left = mid + 1;
      }
    }
    return -1;
  }

  private int findRight(Dictionary array) {
    int a = 1;
    while (array.get(a) != null) {
      a = a * 2;
    }
    int left = a/2;
    while (left < a - 1) {
      int mid = left + (a - left)/2;
      if (array.get(mid) != null ) {
        left = mid;
      } else {
        a = mid - 1;
      }
    }
    if (array.get(a) != null) {
      return a;
    } else {
      return left;
    }
  }

}
